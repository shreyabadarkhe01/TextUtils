{"version":3,"sources":["components/About.js","components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["About","props","myStyle","color","mode","backgroundColor","react_default","a","createElement","className","style","id","type","data-bs-toggle","data-bs-target","aria-expanded","aria-controls","aria-labelledby","data-bs-parent","Alert","alert","height","concat","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","href","title","aria-label","react_router_dom","aria-current","to","changeAboutTo","onClick","toggleMode","htmlFor","TextForm","_useState","useState","_useState2","Object","slicedToArray","text","setText","Fragment","heading","rows","value","onChange","event","target","disabled","length","newText","showAlert","split","map","s","substring","join","document","getElementById","navigator","clipboard","writeText","filter","element","defaultProps","App","setMode","_useState3","_useState4","setAlert","message","setTimeout","cls","body","components_Alert","react_router","path","reportWebVitals","onPerfEntry","Function","__webpack_require__","e","then","bind","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode","src_App"],"mappings":"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","file":"static/js/main.ecdbcf14.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\n\r\nexport default function About(props) {\r\n\r\n\r\n//   const [myStyle,setMyStyle] = useState ({\r\n//     color: 'black',\r\n//     backgroundColor: 'white'\r\n//   })\r\n\r\n  let myStyle = {\r\n    color: props.mode === 'dark'? 'white':'#042743',\r\n    backgroundColor: props.mode === 'dark'?'rgb(36 74 104)':'white',\r\n    // border: '2px solid',\r\n    // borderColor: props.mode === 'dark'? 'white':'#042743'\r\n\r\n  }\r\n\r\n //const [btntxt,setBtnTxt] = useState(\"Enable Dark Mode\");\r\n\r\n//   const toggleStyle=()=>{\r\n\r\n//     if(myStyle.color === 'black'){\r\n\r\n//         setMyStyle({\r\n//             color: 'white',\r\n//             backgroundColor: 'black',\r\n//             border: '1px solid white'\r\n//         })\r\n//         setBtnTxt(\"Enable Light Mode\")\r\n//     }\r\n//     else{\r\n//         setMyStyle({\r\n//             color: 'black',\r\n//             backgroundColor: 'white'\r\n//         })\r\n//         setBtnTxt(\"Enable Dark Mode\")\r\n//     }\r\n//   }\r\n\r\n  return (\r\n    <div className='container my-3' style={{color: props.mode === 'dark'? 'white':'#042743'}} >\r\n        <h1 className='my-3'>About Us</h1>\r\n        <div className=\"accordion\" id=\"accordionExample\">\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingOne\">\r\n                <button className=\"accordion-button\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseOne\" aria-expanded=\"true\" aria-controls=\"collapseOne\">\r\n                   <strong> Analyze your text</strong>\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseOne\" className=\"accordion-collapse collapse show\" aria-labelledby=\"headingOne\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                    TextUtils gives you a way to analyze your text quickly and efficienty. Be it word count, character count or preview.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\" style={myStyle}>\r\n                <h2 className=\"accordion-header\" id=\"headingTwo\">\r\n                <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseTwo\" aria-expanded=\"false\" aria-controls=\"collapseTwo\">\r\n                    <strong>Free to Use</strong>\r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseTwo\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingTwo\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                    This is a free character counter tool that provides instant character count and word count statistics for a given text.TextUtils reports the number of words and characters.Thus it is suitable for writing test with word/character count.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"accordion-item\">\r\n                <h2 className=\"accordion-header\" id=\"headingThree\">\r\n                <button className=\"accordion-button collapsed\" type=\"button\" style={myStyle} data-bs-toggle=\"collapse\" data-bs-target=\"#collapseThree\" aria-expanded=\"false\" aria-controls=\"collapseThree\">\r\n                   <strong>Browser Compatible</strong>   \r\n                </button>\r\n                </h2>\r\n                <div id=\"collapseThree\" className=\"accordion-collapse collapse\" aria-labelledby=\"headingThree\" data-bs-parent=\"#accordionExample\">\r\n                    <div className=\"accordion-body\" style={myStyle}>\r\n                     This word counter software works in any web browsers such as Chrome, FireFox, Internet Explorer, Safari, Opera. It can count characters in facebook, blog, excel documents,pdf documents, essays, etc.\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        {/* <div className=\"container my-3\">\r\n\r\n            <button onClick={toggleStyle} type='button' className=\"btn btn-primary\">{btntxt}</button>\r\n        </div> */}\r\n    </div>\r\n  )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n\r\n    const capitalize = (word)=>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    if(props.alert!==null){\r\n    return (\r\n    <div style={{height:'50px' }}>\r\n    \r\n        \r\n       <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n           <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n            \r\n        </div>\r\n    </div>\r\n    )\r\n    }\r\n    else{\r\n    return(\r\n        <div style={{height:'50px' }}>\r\n\r\n        </div>\r\n    )\r\n    }\r\n}\r\n\r\nexport default Alert\r\n","import React from 'react' //created by typing rfc and enter\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport default function Navbar(props) {   \r\n  return (\r\n    <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode} `}>\r\n  <div className=\"container-fluid\">\r\n    <a className=\"navbar-brand\" href=\"#\">{props.title}</a>\r\n    {/* <Link className=\"navbar-brand\" to=\"/\">{props.title}</Link> */}\r\n    <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n      <span className=\"navbar-toggler-icon\"></span>\r\n    </button>\r\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n      <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link {({ isActive }) => (isActive ? 'link-active' : 'link')}\" aria-current=\"page\" to=\"/\" >Home</Link>\r\n          {/* <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">Home</a> */}\r\n        </li>\r\n        <li className=\"nav-item\">\r\n          <Link className=\"nav-link {({ isActive }) => (isActive ? 'link-active' : 'link')}\"  to=\"/about\">{props.changeAboutTo}</Link>\r\n          {/* <a className=\"nav-link\" href=\"/about\">{props.changeAboutTo}</a> */}\r\n        </li>\r\n       \r\n      </ul>\r\n     \r\n      {/* for color palatte blue */}\r\n      {/* <div className=\"d-flex\">\r\n        <div className=\"bg-primary rounded mx-2\" onClick={()=>props.toggleMode('primary')} style={{height:'30px',width:'30px', cursor:'pointer'}}></div>\r\n        <div className=\"bg-danger rounded mx-2\" onClick={()=>props.toggleMode('danger')} style={{height:'30px',width:'30px', cursor:'pointer'}}></div>\r\n        <div className=\"bg-success rounded mx-2\" onClick={()=>props.toggleMode('success')} style={{height:'30px',width:'30px', cursor:'pointer'}}></div>\r\n        <div className=\"bg-warning rounded mx-2\" onClick={()=>props.toggleMode('warning')} style={{height:'30px',width:'30px', cursor:'pointer'}}></div>\r\n     </div>  */}\r\n\r\n      <div className={`form-check form-switch text-${props.mode==='dark'? 'white':'black'}`}>\r\n        {/* <input className=\"form-check-input\" onClick={()=>props.toggleMode(null)} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/> */}\r\n        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\"/>\r\n        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode==='light'? 'Dark':'Light'}Mode</label>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</nav>\r\n  )\r\n}     \r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    changeAboutTo: PropTypes.string,\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    changeAboutTo: 'About'\r\n};\r\n","import React,{useState} from 'react'\r\n\r\n\r\n\r\nexport default function TextForm(props) {\r\n\r\nconst handleUpClick = ()=>{\r\n    //console.log(\"Uppercase was clicked\" + text);\r\n    let newText = text.toUpperCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Uppercase!\",\"success\");\r\n}   \r\nconst handleLowClick = ()=>{\r\n    \r\n    let newText = text.toLowerCase();\r\n    setText(newText);\r\n    props.showAlert(\"Converted to Lowercase!\",\"success\");\r\n}   \r\nconst handleClearClick = ()=>{\r\n    \r\n    let newText = '';\r\n    setText(newText);\r\n    props.showAlert(\"Text cleared!\",\"success\");\r\n}   \r\n\r\n// let capitalize = (element=>{\r\n  //   //return element.replace(element[0],element[0].toUpperCase());\r\n  //   return element.charAt(0).toUpperCase() + element.substring(1);\r\n  // })\r\n  \r\n  const handleCapitalizeClick = ()=>{\r\n    \r\n    // let charArr = text.toLowerCase().split(\" \")\r\n    // let newText = charArr.map(capitalize).join(\" \");\r\n    //let newText = text.toLowerCase().split(\" \").map(capitalize).join(\" \");\r\n    let newText = text.toLowerCase().split(\" \").map(s=> s.charAt(0).toUpperCase() + s.substring(1)).join(\" \");\r\n    setText(newText);\r\n    props.showAlert(\"Capitalized!\",\"success\");\r\n  }   \r\n  \r\n  const handleCopyClick = ()=>{\r\n      \r\n      let text = document.getElementById('myBox');\r\n      //text.select();\r\n      navigator.clipboard.writeText(text.value);\r\n      //document.getSelection().removeAllRanges();  //to deselect the copied text\r\n      props.showAlert(\"Copied to Clipboard!\",\"success\");\r\n  }  \r\n  \r\n  const handleExtraSpacesClick = () =>{\r\n     let newText = text.split(/[ ]+/);\r\n     \r\n     setText(newText.join(\" \"));\r\n     props.showAlert(\"Extra spaces are removed successfully!\",\"success\");\r\n\r\n  }\r\n\r\n\r\nconst handleOnChange = (event)=>{\r\n    //console.log(\"On Change\");\r\n    setText(event.target.value);\r\n}   \r\nconst [text,setText] = useState('');\r\n//text = \"sddfsd\"; //Wrong way \r\n//setText(\"new text\"); //correct way to change state\r\n  return (\r\n    <>\r\n    <div className='container' style={{color:props.mode==='dark'? 'white':'#042743'}} >\r\n\r\n        <h1 className='mb-2'>{props.heading}</h1> \r\n      \r\n        <div className=\"mb-3\">\r\n         <textarea className=\"form-control\" id=\"myBox\" rows=\"8\" value={text} onChange={handleOnChange} style={{backgroundColor: props.mode==='dark'? '#13466e':'white', color: props.mode==='dark'? 'white':'black'}}></textarea>\r\n        </div>\r\n\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleUpClick}>Convert to Uppercase</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleLowClick}>Convert to Lowercase</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleClearClick}>Clear Text</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCapitalizeClick}>Capitalize the First Letter</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleCopyClick}>Copy Text</button>\r\n        <button disabled={text.length===0} className=\"btn btn-primary mx-1 my-1\" onClick={handleExtraSpacesClick}>Remove Extra Spaces</button>\r\n\r\n    </div>\r\n    <div className=\"container my-2\" style={{color:props.mode==='dark'? 'white':'#042743'}} >\r\n      <h2>Your text summary</h2>\r\n      <p>{text.split(/\\s+/).filter((element)=>{return element.length!==0}).length } words and {text.length} characters</p>\r\n      <p>{0.008 * text.split(\" \").filter((element)=>{return element.length!==0}).length} Minutes to read</p>\r\n      <h2>Preview</h2>\r\n      <p>{text.length>0?text:\"Nothing to preview!\"}</p>\r\n    </div>\r\n    </>\r\n  )\r\n}\r\n","\nimport React, { useState } from 'react';\n\nimport {BrowserRouter as Router , Routes ,Route } from 'react-router-dom';\n\nimport './App.css';\n import About from './components/About';\nimport Alert from './components/Alert';\nimport Navbar from './components/Navbar';\nimport TextForm from './components/TextForm';\n\n\n\n\nfunction App() {\n  const [mode,setMode] = useState('light'); //whether dark mode is enabled or not\n  const [alert, setAlert] = useState(null);\n\n  const showAlert = (message,type) =>{\n    setAlert({\n      msg:message,\n      type: type\n    })\n    setTimeout(()=>{\n      setAlert(null)\n    },3000)\n    // document.style.transform = ease-out\n  }\n\n  // const removeBodyClasses=()=>{\n  //   document.body.classList.remove('bg-light')\n  //   document.body.classList.remove('bg-dark')\n  //   document.body.classList.remove('bg-warning')\n  //   document.body.classList.remove('bg-danger')\n  //   document.body.classList.remove('bg-success')\n  //   document.body.classList.remove('bg-primary')\n    \n  // }\n  const toggleMode = (cls)=> {\n    // removeBodyClasses();\n    // console.log(cls);\n    // document.body.classList.add('bg-'+cls);\n\n    if(mode==='light')\n    {\n      setMode('dark');\n      document.body.style.backgroundColor = '#042743';\n      showAlert(\"Dark mode has been enabled\",\"success\");\n      //document.title = \"TextUtils - Dark Mode\";\n    }\n    else{\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      showAlert(\"Light mode has been enabled\",\"success\");\n      //document.title = \"TextUtils - Light Mode\";\n    }\n  }\n\n  return (\n\n    <>\n    <Router>\n\n    \n          {/* <Navbar title = \"Textutils\" changeAboutTo = \"About Us\" />  */}\n          {/* <Navbar /> */}\n        <Navbar title = \"Textutils\" mode={mode} toggleMode = {toggleMode} /> \n        <Alert alert = {alert} />\n\n        <div className=\"container my-3 \">\n          <Routes>\n            <Route path=\"/about\" element={<About mode={mode}/>}  />                        \n            <Route path=\"/\" element={<TextForm showAlert={showAlert} heading=\"Try TextUtils - Word Counter, Character counter , Remove extra spaces\" mode={mode} />} />                      \n          </Routes>\n\n            {/* <TextForm showAlert={showAlert} heading=\"Try TextUtils - Word Counter, Character counter , Remove extra spaces\" mode={mode}/> */}\n        </div>\n    </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\n//import About from './components/About';\n//import TextForm from './components/About';\nimport reportWebVitals from './reportWebVitals';\n// import { BrowserRouter } from \"react-router-dom\";\n// import {\n  \n//   Routes,\n//   Route,\n// } from \"react-router-dom\";\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n   {/* <BrowserRouter> */}\n          <App/>\n          {/* <Routes> */}\n\n            {/* <Route path=\"/\" element={<About />} />\n            <Route path=\"/about\" element={<TextForm  />} /> */}\n          {/* </Routes> */}\n      {/* </BrowserRouter> */}\n  </React.StrictMode>\n);\n\n\n\n\n\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}